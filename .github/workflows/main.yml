name: Generate Tag on Main Merge

on:
  push:
    branches:
      - main

jobs:
  checkout-repository:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.0.0')
          echo "LATEST_TAG=$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT  # Write to the output file

  get-pr-labels:
    runs-on: ubuntu-latest
    needs: [checkout-repository]
    outputs:
      pr_label: ${{ steps.get_label.outputs.result }}
    steps:
      - name: Get PR Labels
        id: get_label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            if (pr.data.length === 0) {
              console.log("No PR found for this commit. Exiting.");
              return;
            }
            const labels = pr.data[0].labels.map(label => label.name);
            console.log("Labels:", labels);
            
            // Filter for major, minor, or patch, returning the first match
            const validLabels = ['major', 'minor', 'patch'];
            const matchedLabel = labels.find(label => validLabels.includes(label)) || 'none';
            
            console.log("Matched Label:", matchedLabel);
            return matchedLabel;

  determine-new-version:
    runs-on: ubuntu-latest
    needs: [checkout-repository, get-pr-labels]
    outputs:
      new_tag: ${{ steps.new_version.outputs.NEW_TAG }}
    steps:
      - name: Set environment variables
        run: |
          echo "PR_LABEL=${{ needs.get-pr-labels.outputs.pr_label }}" >> $GITHUB_ENV
          echo "LATEST_TAG=${{ needs.checkout-repository.outputs.latest_tag }}" >> $GITHUB_ENV

      - name: Determine New Version
        id: new_version
        run: |
          echo "LATEST_TAG: $LATEST_TAG"
          OLD_VERSION=${LATEST_TAG#v}  # Remove the leading 'v' if present
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"  # Split the version string into major, minor, and patch
          echo "Raw PR_LABEL: $PR_LABEL"
          echo "MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"
          
          # Clean PR_LABEL (remove extra quotes and trim spaces)
          CLEAN_LABEL=$(echo "${PR_LABEL}" | sed 's/"//g' | xargs)
          echo "Processed PR_LABEL: '$CLEAN_LABEL'"

          # Ensure values are integers
          declare -i NEW_MAJOR=$MAJOR
          declare -i NEW_MINOR=$MINOR
          declare -i NEW_PATCH=$PATCH

          # Only proceed if the label is valid
          if [[ "$CLEAN_LABEL" == *"major"* ]]; then
              ((NEW_MAJOR+=1));
              NEW_MINOR=0;
              NEW_PATCH=0;
          elif [[ "$CLEAN_LABEL" == *"minor"* ]]; then
              ((NEW_MINOR+=1));
              NEW_PATCH=0;
          elif [[ "$CLEAN_LABEL" == *"patch"* ]]; then
              ((NEW_PATCH+=1));
          else
              echo "No valid version label found. Exiting."
              exit 1
          fi

          NEW_TAG="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT  # Write to the output file

  create-tag:
    runs-on: ubuntu-latest
    needs: [checkout-repository, determine-new-version]
    steps:
      - name: Set environment variables
        run: |
          echo "NEW_TAG=${{ needs.determine-new-version.outputs.new_tag }}" >> $GITHUB_ENV
      - name: Checkout Repository (again to ensure it's available)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch latest changes before tagging
        run: |
          git fetch --tags

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

